Check to see if two arrays are the same:

Time and space complex: O(N)

  function arraysAreSame(arr1, arr2) {
    const arrHolder = {}

    if (arr1.length !== arr2.length) return false

    for (let i = 0; i < arr1.length; i++) {
      if (arrHolder[arr1[i]]) arrHolder[arr1[i]]++
      else arrHolder[arr1[i]] = 1
    }

    for (let j = 0; j < arr2.length; j++) {
      if (arrHolder[arr2[j]]) arrHolder[arr2[j]]--
      else return false
    }

    return true
  }


  console.log(arraysAreSame([1,2,3,4,5], [5,4,3,2,1]))
  console.log(arraysAreSame([1,2,3,4,5], [5,5,5,2,1]))


Convert Roman numberal to base 10 number:

time complexity: O(N), where N is length of Roman string

  function romanNumb(n) {
    let base10num = 0

    for (let i = 0; i < n.length; i++) {
      if (convert[n[i - 1]] < convert[n[i]]) base10num += - convert[n[i - 1]] + convert[n[i]]
      else if (convert[n[i + 1]] <= convert[n[i]] || i === n.length - 1) base10num += convert[n[i]]
    }

    return base10num
  }

  const convert = {"I": 1,
  "V":5,
  "X":10,
  "L":50,
  "C":100,
  "D":500,
  "M":1000
  }

  console.log(romanNumb("XXVIII"))
  console.log(romanNumb("XXIX"))

Calculate the nth root of given number

time complexity: O(logN)

  function nthRoot(num, root) {
    let upper = num
    let lower = 0
    let x = num//(upper - lower) / 2.0
    const marginError = 0.000001

    while (Math.abs(num - expo(x, root)) > marginError) {
      if (expo(x, root) > num) upper = x
      else lower = x
      x = (upper + lower) / 2.0
    }
    return x
  }

  function expo(a, b){
      let result = 1;

      while (b>0){
          result *= a;
          b--;
      }

      return result;
  }

  nthRoot(7,3)

Bubble Sort:

complexity: O(N^2) average and worst case

  function bubble(arr) {
    const len = arr.length

    for (let i = len - 1; i >= 0; i--) {
      for (let j = 1; j <= i; j++) {
        if (arr[j] < arr[j - 1]) arr = swap(arr, j - 1, j)
      }
    }
    return arr
  }

  function swap(arr, left, right) {
    const holder = arr[left]
    arr[left] = arr[right]
    arr[right] = holder

    return arr
  }


  bubble([12,5,7,8,1,4,6,7,8,5,3])
