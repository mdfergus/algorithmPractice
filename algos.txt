Check to see if two arrays are the same:

Time and space complex: O(N)

  function arraysAreSame(arr1, arr2) {
    const arrHolder = {}

    if (arr1.length !== arr2.length) return false

    for (let i = 0; i < arr1.length; i++) {
      if (arrHolder[arr1[i]]) arrHolder[arr1[i]]++
      else arrHolder[arr1[i]] = 1
    }

    for (let j = 0; j < arr2.length; j++) {
      if (arrHolder[arr2[j]]) arrHolder[arr2[j]]--
      else return false
    }

    return true
  }


  console.log(arraysAreSame([1,2,3,4,5], [5,4,3,2,1]))
  console.log(arraysAreSame([1,2,3,4,5], [5,5,5,2,1]))


Convert Roman numberal to base 10 number:

time complexity: O(N), where N is length of Roman string

  function romanNumb(n) {
    let base10num = 0

    for (let i = 0; i < n.length; i++) {
      if (convert[n[i - 1]] < convert[n[i]]) base10num += - convert[n[i - 1]] + convert[n[i]]
      else if (convert[n[i + 1]] <= convert[n[i]] || i === n.length - 1) base10num += convert[n[i]]
    }

    return base10num
  }

  const convert = {"I": 1,
  "V":5,
  "X":10,
  "L":50,
  "C":100,
  "D":500,
  "M":1000
  }

  console.log(romanNumb("XXVIII"))
  console.log(romanNumb("XXIX"))

Calculate the nth root of given number

time complexity: O(logN)

  function nthRoot(num, root) {
    let upper = num
    let lower = 0
    let x = num//(upper - lower) / 2.0
    const marginError = 0.000001

    while (Math.abs(num - expo(x, root)) > marginError) {
      if (expo(x, root) > num) upper = x
      else lower = x
      x = (upper + lower) / 2.0
    }
    return x
  }

  function expo(a, b){
      let result = 1;

      while (b>0){
          result *= a;
          b--;
      }

      return result;
  }

  nthRoot(7,3)

Bubble Sort:

complexity: O(N^2) average and worst case
sort time on 20k items: 41932.703ms

  function bubble(arr) {
    const len = arr.length

    for (let i = len - 1; i >= 0; i--) {
      for (let j = 1; j <= i; j++) {
        if (arr[j] < arr[j - 1]) arr = swap(arr, j - 1, j)
      }
    }
    return arr
  }

  function swap(arr, left, right) {
    const holder = arr[left]
    arr[left] = arr[right]
    arr[right] = holder

    return arr
  }


Selection sort:

complexity: O(N^2) for best, average, and worst case
sort on 20k items: 3664.518ms

  function selection(arr) {
    const len = arr.length
    console.time("sort");

    for (let i = 0; i < len - 1; i++) {
      let min = arr.lastIndexOf(Math.min(...arr.slice(i)))
      arr = swap(arr, i, min)
    }
    console.timeEnd("sort")
    return arr
  }

  function swap(arr, left, right) {
    const holder = arr[left]
    arr[left] = arr[right]
    arr[right] = holder

    return arr
  }

Insertion sort:

Complexity: O(N^2) average and worst case

sort time of 5k items: 22835.934ms

  function insertion(arr) {
    console.time("sort")
    const len = arr.length

    for (let i = 1; i < len; i++) {
      let current = arr[i]
      j = i

      while (j > 0 && arr[j - 1] > current ) {
        arr[j] = arr[j-1]
        j--
      }
      arr[j] = current
    }



    console.timeEnd("sort")
    return arr
  }

  function swap(arr, left, right) {
    const holder = arr[left]
    arr[left] = arr[right]
    arr[right] = holder

    return arr
  }


Merge sort:

Time complexity: O(n Log(n))

sort time of 20k items: 145.361ms
sort on 150k items: 12863.047ms

  function merge(arr) {
    const len = arr.length

    if(len <= 1) return arr

    const mid = Math.floor(len / 2)
    const left = arr.slice(0,mid)
    const right = arr.slice(mid)

    return mergeThis(merge(left), merge(right))
  }

  function mergeThis(left, right) {
    let output = []

    while (left.length && right.length) {
      if (left[0] < right[0]) output.push(left.shift())
      else output.push(right.shift())
    }

    if(right.length) output.push(...right)
    else output.push(...left)

    return output
  }


Counting Sort (Integer sorting)

Time complexity: O(N+K)

Time to sort 120k items: 15.881ms

  function counting(arr) {
    let min = Math.min(...arr)
    const freq = new Array(Math.max(...arr) - min + 1).fill(0)

    for (let i = 0; i < arr.length; i++) {
      let el = arr[i]
      freq[el - min]++
    }

    const output = []

    for (let j = 1; j < freq.length; j++) {
      let holder = freq[j]
      freq[j] += freq[j-1]
    }
    freq.unshift(0)
    freq.pop()

    for (let n = 0; n < freq.length; n++) {
      while (freq[n+1] > freq[n]) {
        output.push(n + min)
        freq[n]++
      }
    }
    while (output.length < arr.length) output.push(min + freq.length - 1)

    return output
  }
